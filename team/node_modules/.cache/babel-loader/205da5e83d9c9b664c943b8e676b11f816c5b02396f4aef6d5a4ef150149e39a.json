{"ast":null,"code":"var _jsxFileName = \"/Users/rigpeawangchuk/Desktop/project_ada/team/src/pages/TasksPage/TasksPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './TasksPage.css'; // Ensure this CSS file is styled as per your requirements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksPage = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [newTaskHours, setNewTaskHours] = useState(0);\n  const [newTaskMinutes, setNewTaskMinutes] = useState(0);\n  const addTask = () => {\n    if (newTask) {\n      const taskMinutes = parseInt(newTaskMinutes, 10);\n      const taskPoints = taskMinutes * 5; // Each minute is worth 5 points\n      setTasks([...tasks, {\n        description: newTask,\n        hours: parseInt(newTaskHours, 10),\n        minutes: taskMinutes,\n        points: taskPoints,\n        // Add the points to the task object\n        timerId: null\n      }]);\n      setNewTask('');\n      setNewTaskHours(0);\n      setNewTaskMinutes(0);\n    }\n  };\n  const addPoints = async points => {\n    try {\n      await fetch('http://localhost:8080/add_points', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: 'defaultUserId',\n          points: points\n        }) // Update 'defaultUserId' with actual user ID\n      });\n    } catch (error) {\n      console.error('Error adding points:', error);\n    }\n  };\n  const startTimer = taskIndex => {\n    let task = tasks[taskIndex];\n    let totalMinutes = task.hours * 60 + task.minutes;\n    if (task.timerId) {\n      clearInterval(task.timerId);\n    }\n    const timerId = setInterval(() => {\n      totalMinutes -= 1;\n      if (totalMinutes <= 0) {\n        clearInterval(timerId);\n        alert(`Time's up for: ${task.description}`);\n        addPoints(task.points);\n      }\n      const updatedHours = Math.floor(totalMinutes / 60);\n      const updatedMinutes = totalMinutes % 60;\n      setTasks(tasks.map((t, index) => index === taskIndex ? {\n        ...t,\n        hours: updatedHours,\n        minutes: updatedMinutes\n      } : t));\n    }, 60000); // 1 minute intervals\n\n    setTasks(tasks.map((t, index) => index === taskIndex ? {\n      ...t,\n      timerId\n    } : t));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasksPageContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-list\",\n      children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [task.description, \" - \", task.hours, \"h \", task.minutes, \"m - \", task.points, \" points\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => startTimer(index),\n          children: \"Start Timer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(TasksPage, \"6d6dRo+ownDeTy9TazAmdLgv4aU=\");\n_c = TasksPage;\nexport default TasksPage;\nvar _c;\n$RefreshReg$(_c, \"TasksPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TasksPage","_s","tasks","setTasks","newTask","setNewTask","newTaskHours","setNewTaskHours","newTaskMinutes","setNewTaskMinutes","addTask","taskMinutes","parseInt","taskPoints","description","hours","minutes","points","timerId","addPoints","fetch","method","headers","body","JSON","stringify","user_id","error","console","startTimer","taskIndex","task","totalMinutes","clearInterval","setInterval","alert","updatedHours","Math","floor","updatedMinutes","map","t","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/rigpeawangchuk/Desktop/project_ada/team/src/pages/TasksPage/TasksPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './TasksPage.css'; // Ensure this CSS file is styled as per your requirements\n\nconst TasksPage = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [newTaskHours, setNewTaskHours] = useState(0);\n  const [newTaskMinutes, setNewTaskMinutes] = useState(0);\n\n  const addTask = () => {\n    if (newTask) {\n      const taskMinutes = parseInt(newTaskMinutes, 10);\n      const taskPoints = taskMinutes * 5; // Each minute is worth 5 points\n      setTasks([...tasks, {\n        description: newTask,\n        hours: parseInt(newTaskHours, 10),\n        minutes: taskMinutes,\n        points: taskPoints, // Add the points to the task object\n        timerId: null\n      }]);\n      setNewTask('');\n      setNewTaskHours(0);\n      setNewTaskMinutes(0);\n    }\n  };\n\n  const addPoints = async (points) => {\n    try {\n      await fetch('http://localhost:8080/add_points', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ user_id: 'defaultUserId', points: points }) // Update 'defaultUserId' with actual user ID\n      });\n    } catch (error) {\n      console.error('Error adding points:', error);\n    }\n  };\n\n  const startTimer = (taskIndex) => {\n    let task = tasks[taskIndex];\n    let totalMinutes = task.hours * 60 + task.minutes;\n\n    if (task.timerId) {\n      clearInterval(task.timerId);\n    }\n\n    const timerId = setInterval(() => {\n      totalMinutes -= 1;\n      if (totalMinutes <= 0) {\n        clearInterval(timerId);\n        alert(`Time's up for: ${task.description}`);\n        addPoints(task.points);\n      }\n\n      const updatedHours = Math.floor(totalMinutes / 60);\n      const updatedMinutes = totalMinutes % 60;\n      setTasks(tasks.map((t, index) => index === taskIndex ? { ...t, hours: updatedHours, minutes: updatedMinutes } : t));\n    }, 60000); // 1 minute intervals\n\n    setTasks(tasks.map((t, index) => index === taskIndex ? { ...t, timerId } : t));\n  };\n\n  return (\n    <div className=\"tasksPageContainer\">\n      {/* Existing Navbar and Input Fields */}\n      <div className=\"tasks-list\">\n        {tasks.map((task, index) => (\n          <div key={index} className=\"task\">\n            <span>{task.description} - {task.hours}h {task.minutes}m - {task.points} points</span>\n            <button onClick={() => startTimer(index)}>Start Timer</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TasksPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}